// C++ CODE

    vector<int> maxMeetings(int N,vector<int> &S,vector<int> &F){
        vector<pair<int,int>> temp;
        for(int i=0;i<N;i++)temp.push_back({F[i],i+1});
        sort(temp.begin(),temp.end());
        int last = temp[0].first;
        vector<int> ans;
        ans.push_back(temp[0].second);
        for(int i=1;i<N;i++){
            if(S[temp[i].second-1]>last){
                ans.push_back(temp[i].second);
                last=temp[i].first;
            }
        }
        sort(ans.begin(),ans.end());
        return ans;
    }


// JAVA CODE

    public static ArrayList<Integer> maxMeetings(int N, int[] S, int[] F) {
        // code here
        int temp[][]=new int[N][2];
        for(int i=0;i<N;i++){
            temp[i][0]=F[i];
            temp[i][1]=i+1;
        }
        Arrays.sort(temp,new Comparator<>(){
            @Override
            public int compare(int a[],int b[]){
                if(a[0]<b[0])return -1;
                if(a[0]==b[0]){
                    if(a[1]<b[1])return 0;
                }
                return 1;
            }
        });
        int last = temp[0][0];
        ArrayList<Integer> ans = new ArrayList<>();
        ans.add(temp[0][1]);
        for(int i=1;i<N;i++){
            if(S[temp[i][1]-1]>last){
                last=temp[i][0];
                ans.add(temp[i][1]);
            }
        }
        Collections.sort(ans);
        return ans;
    }
