// JAVA CODE

    static long maxDiamonds(int[] A, int N, int K) {
        // code here
        long ans=0;
        PriorityQueue<Integer> pq=new PriorityQueue<>(Collections.reverseOrder());
        for(int i=0;i<N;i++)pq.add(A[i]);
        while(K!=0){
            int t=pq.peek();
            ans+=t;
            pq.poll();
            pq.add(t/2);
            K--;
        }
        return ans;
    }
    
    
// C++ CODE

    long long maxDiamonds(int A[], int N, int K) {
        // code here
        long long ans=0;
        priority_queue<int> pq;
        for(int i=0;i<N;i++)pq.push(A[i]);
        while(K--){
            int t=pq.top();
            ans+=t;
            pq.pop();
            pq.push(t/2);
        }
        return ans;
    }
