// JAVA CODE

    int[] kLargest(int[] arr, int n, int k) {
        // code here
        PriorityQueue<Integer> pq=new PriorityQueue<>();
        for(int i=0;i<k;i++){
	        pq.add(arr[i]);
	    }
	    for(int i=k;i<n;i++){
	        if(pq.peek()<arr[i]){
	            pq.poll();
	            pq.add(arr[i]);
	        }
	    }
	    int ans[]=new int[k];
	    int i=0;
	    while(pq.size()!=0){
	        ans[k-1-i]=pq.peek();
	        pq.poll();
	        i++;
	    }
	    return ans;
    }
    
    
// C++ CODE

	vector<int> kLargest(int arr[], int n, int k) {
	    // code here
	    priority_queue<int,vector<int>,greater<int>> pq;
	    for(int i=0;i<k;i++)pq.push(arr[i]);
	    for(int i=k;i<n;i++){
	        if(arr[i]>pq.top()){
	            pq.pop();
	            pq.push(arr[i]);
	        }
	    }
	    vector<int> ans(k,0);
	    int i=0;
	    while(pq.size()){
	        ans[k-1-i]=pq.top();
	        pq.pop();
	        i++;
	    }
	    return ans;
	}
