// C++ CODE

    int findMinCost(string x, string y, int costX, int costY) {
        // Your code goes here
        int n=x.length(),m=y.length();
        int dp[n+1][m+1];
        for(int i=0;i<=n;i++){
            dp[i][0]=0;
        }
        for(int i=0;i<=m;i++){
            dp[0][i]=0;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(x[i-1]==y[j-1])dp[i][j]=1+dp[i-1][j-1];
                else dp[i][j]=max(dp[i][j-1],dp[i-1][j]);
            }
        }
        return (n-dp[n][m])*costX+(m-dp[n][m])*costY;
    }


// JAVA CODE

    public int findMinCost(String x, String y, int costX, int costY) {
        int n = x.length(),m = y.length();
	    int dp[][] = new int[n+1][m+1];
	    for(int i=0;i<=n;i++)
	    dp[i][0]=0;
	    for(int i=0;i<=m;i++)
	    dp[0][i]=0;
	    for(int i=1;i<=n;i++){
	        for(int j=1;j<=m;j++){
	            if(x.charAt(i-1)==y.charAt(j-1))dp[i][j]=1+dp[i-1][j-1];
	            else dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
	        }
	    }
	    return (n-dp[n][m])*costX+(m-dp[n][m])*costY;
    }


// Time Complexity:- O(N*M)
// Space Complexity:- O(N*M)
